Developing with the CDM Library

	<Table of Contents>

%{toc|section=0|fromDepth=2|toDepth=3}
	

  <<Note:>> If you are not familiar with eclipse, maven or subversion please read the {{{http://dev.e-taxonomy.eu/trac/wiki/DeveloperApplications}developer applications document}} for brief introductions. Please see {{{./troubleshooting.html}Troubleshooting}} in case you run into problems or contact {{{mailto:editsupport@bgbm.org}editsupport@bgbm.org}}.

* Integrating the CDM Library into a maven project

  To integrate the CDM Library into your personal maven project pelase add our maven repository to your POM: {{http://wp5.e-taxonomy.eu/cdmlib/mavenrepo/}}. To use the <cdmlib-service> package add the following dependency to you POM (adapt the right version number !!):

---
<dependency>
	<groupId>eu.etaxonomy</groupId>
	<artifactId>cdmlib-service</artifactId>
	<version>x.x</version>
</dependency>
---


* Spring applications with the CDM Library

  In your own applicationContext.xml you can simply import the cdm service spring beans from the library. In addition it also needs a datasource bean and a hibernateProperties bean specific for that datasource. The CDM Library comes with an embedded hypersonic database that is super easy to use. All you need to do is to import that hsql specific spring configuration like this:

---
applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<import resource="classpath:/eu/etaxonomy/cdm/services.xml" />
	<import resource="classpath:/eu/etaxonomy/cdm/hsql-datasource.xml" />
    
</beans>
---

  In case you want to define the datasource within your own applicationContext you can surely do so. For a typical mysql database it looks like this: 

---
applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<import resource="classpath:/eu/etaxonomy/cdm/services.xml" />

    <bean id="dataSource" 
			class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://192.168.2.10/cdm_build"/>
        <property name="username" value="cdm_user"/>
        <property name="password" value="why_do_i_need_this"/>
    </bean>
    
    <bean id="hibernateProperties" 
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.cache.provider_class">
					org.hibernate.cache.NoCacheProvider
				</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>    
</beans>
---


* Developing the CDM Library

  To use the entire CDM Library with Eclipse, you need some plugins and to follow this installation guide:

    * install maven 2.0.x commandline tools locally (http://maven.apache.org/download.html). Follow the instruction to install maven on your local machine.

    * install subclipse 1.6.x in eclipse if not yet installed (Update Site: http://subclipse.tigris.org/update_1.6.x). 

    * make sure Java JDK >= 1.6 is installed (JRE is not enough) and JAVA_HOME is set to JDK path

    * checkout cdmlib and create eclipse artifacts (using e.g. tortoiseSVN):

---
$ svn co http://dev.e-taxonomy.eu/svn/trunk/cdmlib/ .
---

    * make sure maven has run at least one time (to create the .m2 folder). If unsure how to do this, run <<<mvn install>>> in the new checked out folder ../cdmlib/cmlib-commons
    
	* Set in Eclipse preferences (not project properties) M2_REPO java class variable (menue: java-buildPath-Classpath), pointing to your local repository. 
    	
		* In OSX for example    /Users/USERNAME/.m2/repository 
    
		* In WinXP for example  C:\Documents and Settings\USERNAME\.m2\repository
		
    * setup new eclipse workspace (where ever you want but using the cdmlib folder may be comfortable
    
	* run the following commands in your cdmlib folder

---
$ mvn install 
---
 
	  to compile and install the cdmlib packages in your local repository.
      
--- 
$ mvn eclipse:eclipse 
---
 
      to let maven create project dependencies and Eclipse metafiles (.project s.o.)

    * create the java projects: 

       * In Eclipse open the Import Wizard: File->Import->General->Existing Projects into Workspace. 

       * Choose "Select root directory". Click "Browse" and navigate to your cdmlib folder (should open by default) and confirm the file dialog.

       * The projects should now show in the Import Wizard window. Select the projects you want wo work on and hit OK.

    * Install AspectJ compiler {{http://www.eclipse.org/aspectj/downloads.php}} , make sure you add the \<aspectj install dir\>/lib/aspectjrt.jar to your class path and <aspectj install dir>/lib/ to your path

    * Install AspectJ Development Tools (AJDT) - Plugin (for eclipse) (Update-Site:{{http://download.eclipse.org/tools/ajdt/xx/dev/update}}) where xx depends on your eclipse installation: xx=35 for eclipse 3.5 and xx=36 for eclipse 3.6

    * Referesh cdmlib-model project within eclipse 

    * Convert the cdmlib-model to AspectJ (right mouse click on project -> AspectJ Tools -> ...).
!! Each time when running mvn eclipse:eclipse on cdmlib-model (or on cdmlib parent folder) you have to first remove and then add AspectJ anew!! 

    * It is also recommended to use the EclipseCodeTemplate


* Where do I go from here?

	Now that you have integrated or installed the CDM Library you are probably looking for documentation on how to develop with it. A good start is to read the {{{./reference.html}reference documentation}} of the CDM Library. The {{{./cdm-uml}UML diagrams}} are also a good starting point to get familiar with the structure of the Common Data Model itself or consult the {{{./apidocs}javadoc}} for the API documentation.
	
	If you want to start coding immediately, we prepared some {{{https://dev.e-taxonomy.eu/trac/wiki/CDMLibraryExamples}code examples}} in the developers wiki.


