<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guid-resolution"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Globally Unique Identifier Resolution</title>
  </info>

  <section>
    <caution>
      <title>Likely To Change</title>

      <para>Globally unique identifiers, their use and implementation are
      still an unresolved topic. The implementaton of objects that are
      identifiable and resolvable in a global sense must, given an open world,
      reflect the standards and best practices being used by the community as
      a whole. Consequently this area of the CDM is likely to change to
      reflect this.</para>
    </caution>

    <para>The service layer implements a number of services designed to serve
    as the basis of a LSID Resolution Service. This includes implementations
    of <interfacename>LSIDAuthorityService</interfacename>,
    <interfacename>LSIDMetadataService</interfacename>, and
    <interfacename>LSIDDataService</interfacename>. Note that these are
    service-layer implementations - the http-specific components can be found
    in the <package>cdmlib-remote</package> package.</para>

    <para>In addition to implementations of the three core LSID Resolution
    services, the service layer holds the
    <interfacename>LSIDRegistry</interfacename>, the component that maps LSID
    authority + namespace combinations onto CDM classes. The implementation
    assumes that a given authority and namespace will map onto a single CDM
    base class, but that authorities may use different namespaces for the same
    class of objects. In addition, the
    <interfacename>LSIDRegistry</interfacename> provides a way of controlling
    which authority + namespace combinations a CDM application will respond
    to. For example, it is possible that an application will store objects
    with identifiers published by another (foreign) authority, but doesn't
    wish to serve metadata about these objects. By only registering specific
    authority + namespace combinations in the
    <interfacename>LSIDRegistry</interfacename>, a CDM store can resolve some
    combinations but not others.</para>

    <para>The three most common methods used are the
    <methodname>getAuthorityWSDL</methodname> and
    <methodname>getAvailableServices</methodname> methods that return a
    <interfacename>javax.xml.transform.Source</interfacename> within an
    <interfacename>ExpiringResponse</interfacename> object suitable for
    rendering in a response to a client, and
    <methodname>getMetadata</methodname>, that returns an
    <interfacename>IIdentifiableEntity</interfacename> within a
    <interfacename>MetadataResponse</interfacename>. If the
    authority+namespace is not resolved, or if the object cannot be resolved,
    or if the client requests metadata in an unavailable format, an exception
    is thrown.</para>
  </section>
</chapter>
