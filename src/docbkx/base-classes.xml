<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-classes" xmlns="http://docbook.org/ns/docbook"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns2="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Base Classes</title>
  </info>

  <section>
    <para>Almost all classes in the CDM implement ICdmBase, an interface that
    specifies common attributes which are:</para>

    <programlisting>package eu.etaxonomy.cdm.model.common;

public interface ICdmBase {

/**
 * Returns local unique identifier for the concrete subclass
 * @return
 */
public int getId();

/**
 * Assigns a unique local ID to this object. 
 * Because of the EJB3 @Id and @GeneratedValue annotation this id will be
 * set automatically by the persistence framework when object is saved.
 * @param id
 */
public void setId(int id);

public UUID getUuid();

public void setUuid(UUID uuid);

public DateTime getCreated();

/**
 * Sets the timestamp this object was created.
 * 
 * @param created
 */
public void setCreated(DateTime created);

public User getCreatedBy();

public void setCreatedBy(User createdBy);
}</programlisting>

    <para>Although all instances have a primary key (<varname>id</varname>)
    that is used by any database software, this should not be used to refer to
    the entity in an application. Instead, a surrogate key
    (<varname>uuid</varname>) is used to identify entities. Both values are
    auto-generated, <varname>uuid</varname> when the object is created,
    <varname>id</varname> at the point the object is persisted (through a call
    to <methodname>save</methodname> or
    <methodname>saveOrUpdate</methodname>).</para>

    <para>Throughout the CDM, temporal data is represented using the <link
    href="http://joda-time.sourceforge.net/">Joda Time API</link> rather than
    the standard java Calender implementation. All CdmBase classes have a
    property that gives their time of creation (<varname>created</varname>,
    populated automatically), and the <classname>User</classname> that created
    the object. The user is retrieved from the security context automatically
    by the persistence layer (for more on security in the CDM, authentication
    and authorization, see the section on <link
    linkend="security">security</link>). For those applications that do not
    wish to use the security infrastructure, the User can also be set
    explicitly by the application.</para>
  </section>

  <section>
    <title>Versionable Entities</title>

    <para>Almost all entities in the CDM are subclasses of
    <classname>VersionableEntity</classname>. This means that the changing
    (persistent) state of an entity through time can be recorded in the
    database, and recovered. This is quite a complex idea and is covered in
    full in the chapter on <link linkend="versioning">versioning</link>.
    Versionable entities have two additional properties:
    <varname>updated</varname>, that holds the date-time when the object was
    last made persistent, and <varname>updatedBy</varname>, that provides the
    user that last updated the entity. Both work in an identical way to
    <varname>created</varname> and <varname>createdBy</varname>. </para>
  </section>
  <section>
    <title>Data model implementation and patterns used across the CDM</title>
    <para>It is worth touching on a couple of common patterns used in implementing the CDM in java: <emphasis>private no-arg constructor</emphasis>s and<emphasis>protected access to collection setters</emphasis>. The ORM technology used in the CDM requires that no-arg constructors exist, and likewise it requires that collections have setter methods as well as getters. However, it is good practice to prevent client application access to these methods to prevent application developers inadvertantly causing mischief (for example, by incorrectly implementing a bidirectional link between a parent and child object). </para>
    <para>To instantiate a new CDM entity programmatically, application developers must use one of the public static factory methods provided by the class. Changing the state of single properties is achieved through normal use of getters and setters. In the case of properties that extend <classname>java.util.Collection</classname> or <classname>java.util.Map</classname>, these collections can be changed through <methodname>add<emphasis>X</emphasis></methodname> and <methodname>remove<emphasis>X</emphasis></methodname>, where <emphasis>X</emphasis> is the property name rather than <methodname>set<emphasis>X</emphasis></methodname>.</para>
  </section>
</chapter>
