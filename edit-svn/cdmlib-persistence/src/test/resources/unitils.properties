#
# NOTE: this is the unitils.properties file for the cdmlib-persitence module
# a separate unitils.properties exists for cdmlib-io and for cdmlib-services
#
#
# the list of all properties is found in
# http://unitils.org/unitils-default.properties
#

### Unitils Modules ###
# List of modules that is loaded. Overloading this list is normally not useful, unless you want to add a custom
# module. Disabling a module can be performed by setting unitils.module.<modulename>.enabled to false.
# If a module's specific dependencies are not found (e.g. hibernate is not in you classpath), this module is not loaded,
# even if it is in this list and the enabled property is set to true. It's therefore not strictly necessary to disable
# any of these modules.
#DEFAULT: unitils.modules=database,dbunit,hibernate,mock,easymock,inject,spring,jpa
unitils.module.easymock.enabled=false
unitils.module.mock.enabled=false


### Database ###
#
# Name or path of the user specific properties file. This file should contain the necessary parameters to connect to the
# developer's own unit test schema. It is recommended to override the name of this file in the project specific properties
# file, to include the name of the project. The system will try to find this file in the classpath, the user home folder
# (recommended) or the local filesystem.
#
unitils.configuration.localFileName=unitils-cdmlib-local.properties
#
updateDataBaseSchema.enabled=true
#
dataSetStructureGenerator.xsd.dirName=src/test/resources/eu/etaxonomy/cdm/persistence/dao/hibernate/
#
dbMaintainer.script.locations=src/test/resources/dbscripts
dbMaintainer.dbVersionSource.autoCreateVersionTable=true
dbMaintainer.autoCreateExecutedScriptsTable=true

#
# default database configurations for HSQL, H2 and MYSQL:
#

# HSQL #
#
#   NOTE: hsqldb v. <1.9 has a bug (http://sourceforge.net/tracker/?func=detail&atid=378131&aid=1407528&group_id=23316)
#         due to which it is not possible to use batch updates, so we need to disable hibernate batching when using
#         hsqldb in the app context:
#
#database.driverClassName=org.hsqldb.jdbcDriver
#database.url=jdbc:hsqldb:mem:cdm
##database.url=jdbc:hsqldb:file:/home/andreas/.hsqldb/cdm;hsqldb.default_table_type=cached
#database.dialect=hsqldb
#dbMaintainer.script.fileExtensions=hsqldb.ddl
#database.userName=sa
#database.password=
#database.schemaNames=PUBLIC
#org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.hsqldb=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory

# H2 #
#
database.driverClassName=org.h2.Driver
#database.driverClassName=com.p6spy.engine.spy.P6SpyDriver
database.url=jdbc:h2:mem:cdm
#database.url=jdbc:h2:file:~/.h2/cdm
database.dialect=h2
dbMaintainer.script.fileExtensions=h2.sql
database.userName=sa
database.password=
database.schemaNames=PUBLIC
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.h2=org.dbunit.ext.h2.H2DataTypeFactory
#org.dbunit.dataset.datatype.IDataTypeFactory.implClassName=org.dbunit.ext.h2.H2DataTypeFactory
org.unitils.core.dbsupport.DbSupport.implClassName.h2=eu.etaxonomy.cdm.database.H2DbSupport
database.storedIndentifierCase.h2=auto
database.identifierQuoteString.h2=auto

#
# MySQL #
# cannot be used
# 1. you need another ddl or sql file to generate the schema
# 2. our DataSet xml files and the dataset.dtd contain upper-case table names like
#    'TERMVOCABULARY_REPRESENTATION_AUD'  but hibernate expects CamelCase with mysql !!!!
#    maybe we can workaround this by implementing a custom EJB3NamingStrategy like
#    UppercaseTableNamingStrategy it must be set in the persitence.xml which returns table names
#    always in uppercase, but this again causes problems with the @Tabel annotations which must
#    exactly match the table names in the database. This means in order to use mysql for tests we would
#    have to change the table names in all of our DataSet files.
#
#database.driverClassName=com.mysql.jdbc.Driver
#database.url=jdbc:mysql://127.0.0.1:3306/test
#database.userName=edit
#database.password=wp5
#database.dialect=mysql
#database.schemaNames=test
#dbMaintainer.script.fileExtensions=mysql.sql
#org.dbmaintain.dbsupport.DbSupport.implClassName.mysql=org.dbmaintain.dbsupport.impl.MySqlDbSupport
#org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.mysqldb=org.dbunit.ext.mysql.MySqlDataTypeFactory


#### Transaction mode ###
#
# If set to commit or rollback, each test is run in a transaction,
# which is committed or rolled back after the test is finished.
# Since we have many tests with incomplete data these tests would be
# failing during commit so it is better use rollback as default
# and set commit for individual test where necessary
DatabaseModule.Transactional.value.default=rollback

# org.unitils.database.transaction.impl.DefaultUnitilsTransactionManager is used by default:
#
#   Implements transactions for unit tests, by delegating to a spring PlatformTransactionManager.
#   The concrete implementation of PlatformTransactionManager that is used depends on the test class.
#   If a custom PlatformTransactionManager was configured in a spring ApplicationContext, this one is used.
#   If not, a suitable subclass of PlatformTransactionManager is created, depending on the configuration
#   of a test. E.g. if some ORM persistence unit was configured on the test, a PlatformTransactionManager
#   that can offer transactional behavior for such a persistence unit is used.
#   If no such configuration is found, a DataSourceTransactionManager is used.
#
# org.unitils.database.transaction.UnitilsTransactionManager.implClassName=org.unitils.database.transaction.impl.SpringTransactionManager

### Hibernate ###
#
HibernateModule.configuration.implClassName=org.hibernate.cfg.Configuration

